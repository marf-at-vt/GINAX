P3D_return_dat <- cbind(beta.hat,var.beta.hat,pvalues)
P3D_return_dat <- as.data.frame(P3D_return_dat)
colnames(P3D_return_dat) <- c("Beta_Hat","Var_Beta_Hat","P_Values")
#indices_Xc=indices_previous
n= length(Y)
#estimate pi0
log.marginal.likelihood_par = function(param)
{
pi0 = exp(param[1]) / (1+exp(param[1]))
g = exp(param[2])
return(sum(log(pi0*dnorm(beta.hat,mean= 0,sd=sqrt(var.beta.hat)) +
(1-pi0)*dnorm(beta.hat,mean= 0,sd=sqrt(var.beta.hat*(g+1)))
)))
}
result <- optim(c(2,-2), fn=log.marginal.likelihood_par, lower = c(1,-20), method = "L-BFGS-B", hessian=TRUE, control = list(fnscale=-1))
pi0.hat = exp(result$par[1]) / (1+exp(result$par[1]))
g.hat = exp(result$par[2])
# Compute posterior probability of beta_j different than 0:
numerator <- (1-pi0.hat)*dnorm(beta.hat,mean= 0,sd=sqrt(var.beta.hat*(g.hat+1)))
denominator <- pi0.hat*dnorm(beta.hat,mean= 0,sd=sqrt(var.beta.hat)) +
(1-pi0.hat)*dnorm(beta.hat,mean= 0,sd=sqrt(var.beta.hat*(g.hat+1)))
postprob <- numerator / denominator
if(!is.null(indices_previous)){
postprob[indices_previous] = 0
}
order.postprob <- order(postprob, decreasing=TRUE)
postprob.ordered <- postprob[order.postprob]
FDR.Bayes <- cumsum(postprob.ordered) / 1:ncol(SNPs)
if(sum(FDR.Bayes > FDR.threshold) == 0){
P3D_return_dat <- cbind(P3D_return_dat,postprob,FALSE)
P3D_return_dat <- as.data.frame(P3D_return_dat)
colnames(P3D_return_dat) <- c("Beta_Hat","Var_Beta_Hat","P_Values","PostProb","Significant")
}else{
P3D_return_dat <- cbind(P3D_return_dat,postprob,postprob >= postprob.ordered[max(which(FDR.Bayes > FDR.threshold))])
P3D_return_dat <- as.data.frame(P3D_return_dat)
colnames(P3D_return_dat) <- c("Beta_Hat","Var_Beta_Hat","P_Values","PostProb","Significant")
}
# screen_list[[ite]] <- P3D_return_dat
if(sum(P3D_return_dat$Significant) > 0){
indices_X <- which(P3D_return_dat$Significant)
X <- SNPs[, indices_X,drop = FALSE]
if(ite != 1){
pi0=pi0_1
g=g_1
}else{
pi0 = pi0.hat
g = g.hat
}
PQL_est <- PQL(Y=Y, kinship=kinship, X=X, Xc=Xc, Xs=Xs, indices_X=indices_X, indices_Xc=indices_previous, family=family, postprob = postprob, offset =offset)
y_star <- PQL_est$y_star
Kappa <- PQL_est$kappa
Beta <- PQL_est$beta
inv_V_vector <- PQL_est$inv_v
H <- PQL_est$H
P <- PQL_est$P
D_inv <- PQL_est$D_inv
if(is.null(Xs)){
y.tilde = t(P) %*% (y_star-Beta[1])
}else{
y.tilde = t(P) %*% (y_star-cbind(1,Xs)%*%Beta[1:(ncol(Xs)+1)])
}
X.tilde = t(P) %*% cbind(X, Xc)
#y.tilda~N(X.tilde*Beta,D)  # full model, no intercept in X.tilde
# elements with all k regressors
dinvy <- D_inv*y.tilde
ydinvy <- sum(D_inv*y.tilde^2)
xdinvx <- t(X.tilde)%*%(D_inv*X.tilde)
total.p <- ncol(X.tilde)
if(total.p < 16){
# Do full model search
total.models <- 2^total.p
log.unnormalized.posterior.probability <- rep(NA, total.models)
log.unnormalized.posterior.probability[1] <- total.p * log(pi0) + log_marginal_likelihood_null(y.tilde=y.tilde,D_inv=D_inv)
dat <- rep(list(0:1), total.p)
dat <- as.matrix(expand.grid(dat))
for (i in 1:(total.models-1)){
model <- unname(which(dat[i + 1,] == 1))
k <- length(model)
Xsub <- X.tilde[,model,drop = FALSE]
if(Matrix::rankMatrix(Xsub)[1] < ncol(Xsub)){
dropped_cols <- caret::findLinearCombos(Xsub)$remove
model <- model[-dropped_cols]
}
x.tilde_m <- matrix(X.tilde[,model], ncol = length(model))
log.unnormalized.posterior.probability[i+1] <-
k*log(1-pi0) + (total.p-k)*log(pi0) +
log.marginal.likelihood(k=k, x.tilde_m=x.tilde_m, y.tilde=y.tilde, D_inv=D_inv, ydinvy=ydinvy, dinvy=dinvy, g=g)
}
log.unnormalized.posterior.probability <- log.unnormalized.posterior.probability - max(log.unnormalized.posterior.probability)
unnormalized.posterior.probability <- exp(log.unnormalized.posterior.probability)
posterior.probability <- unnormalized.posterior.probability/sum(unnormalized.posterior.probability)
}else {
# Do model search with genetic algorithm
fitness_ftn <- function(string){
if(sum(string) == 0){
return(total.p * log(pi0) + log_marginal_likelihood_null(y.tilde=y.tilde,D_inv=D_inv))
}else{
model <- which(string==1)
k <- length(model)
Xsub <- X.tilde[,model,drop = FALSE]
if(Matrix::rankMatrix(Xsub)[1] < ncol(Xsub)){
dropped_cols <- caret::findLinearCombos(Xsub)$remove
model <- model[-dropped_cols]
}
x.tilde_m <- matrix(X.tilde[,model], ncol = length(model))
return(k*log(1-pi0) + (total.p-k)*log(pi0) +
log.marginal.likelihood(k=k, x.tilde_m=x.tilde_m, y.tilde=y.tilde, D_inv=D_inv, ydinvy=ydinvy, dinvy=dinvy, g=g)
)
}
}
if(total.p > 99){
suggestedsol <- diag(total.p)
tmp_log.unnormalized.posterior.probability <- vector()
for(i in 1:total.p){
model <- which(suggestedsol[i,]==1)
k <- length(model)
Xsub <- X.tilde[,model,drop = FALSE]
if(Matrix::rankMatrix(Xsub)[1] < ncol(Xsub)){
dropped_cols <- caret::findLinearCombos(Xsub)$remove
model <- model[-dropped_cols]
}
x.tilde_m <- matrix(X.tilde[,model], ncol = length(model))
tmp_log.unnormalized.posterior.probability[i] <- (k*log(1-pi0) + (total.p-k)*log(pi0) +
log.marginal.likelihood(k=k, x.tilde_m=x.tilde_m, y.tilde=y.tilde, D_inv=D_inv, ydinvy=ydinvy, dinvy=dinvy, g=g) )
}
suggestedsol <- rbind(0,suggestedsol[order(tmp_log.unnormalized.posterior.probability,decreasing = TRUE)[1:99],])
}else{
suggestedsol <- rbind(0,diag(total.p))
}
# maxiterations = 4000
# runs_til_stop = 1000
fitness_ftn <- memoise::memoise(fitness_ftn)
ans <- GA::ga("binary", fitness = fitness_ftn, nBits = total.p,maxiter = maxiterations,popSize = 100,
elitism = min(c(10,2^total.p)),run = runs_til_stop,suggestions = suggestedsol,monitor = FALSE)
memoise::forget(fitness_ftn)
dat <- ans@population
dupes <- duplicated(dat)
dat <- dat[!dupes,]
ans@fitness <- ans@fitness[!dupes]
log.unnormalized.posterior.probability <- ans@fitness - max(ans@fitness)
unnormalized.posterior.probability <- exp(log.unnormalized.posterior.probability)
posterior.probability <- unnormalized.posterior.probability/sum(unnormalized.posterior.probability)
}
inclusion_prb <- unname((t(dat)%*%posterior.probability)/sum(posterior.probability))
model <- dat[which.max(posterior.probability),]
model_dat <- cbind(c(indices_X, indices_previous),model,inclusion_prb)
model_dat <- as.data.frame(model_dat)
colnames(model_dat) <- c("SNPs","BestModel","Inclusion_Prob")
# select_list[[ite]] <- model_dat
tmp=list(prescreen = P3D_return_dat,postprob=postprob,modelselection = model_dat,pi_0_hat = pi0.hat, g_hat = g.hat)
}else{
tmp=list(prescreen = P3D_return_dat,postprob=postprob,modelselection = "No significant in prescreen1",pi_0_hat = pi0.hat, g_hat = g.hat)
}
if(!is.character(tmp$modelselection)){
indices_Xc <- tmp$modelselection$SNPs[tmp$modelselection$BestModel == 1]
postprob <- tmp$postprob
indices_sig_list[[ite]] <- indices_Xc
if(ite == 1){
pi0_1 <- tmp$pi_0_hat
g_1 <- tmp$g_hat
}
Xc <- SNPs[,indices_Xc]
ite <- ite + 1
}
}
return(tmp)
}
GINAX <- GINAX_terminal(Y = Y, kinship = Covariance, Z=Z, SNPs=SNPs, family=family, offset=offset,
FDR.threshold = 1-FDR_Nominal, maxiterations = maxiterations, runs_til_stop = runs_til_stop)
is.character(GINAX$modelselection)
GINAX$modelselection$SNPs[GINAX$modelselection$BestModel == 1]
GINAX$modelselection
data("Y_poisson")
load("C:/Users/xshuangshuang/OneDrive - Virginia Tech/GINAX/data/data_Y_poisson.rda")
Y=Y_poisson
#' GINAX function
#'
#' @keywords internal
GINAX_terminal <- function(Y, kinship, Z, SNPs, family, offset=NULL,
FDR.threshold, maxiterations, runs_til_stop){
ite <- 1
indices_sig_list <- list()
Xc <- NULL
X = NULL
Xs=NULL
pi0_1 <- NULL
indices_Xc <- NULL
tmp = NULL
indices_previous = NULL
postprob = NULL
# screen_list = list()
# select_list = list()
while((ite <= 10) &
((is.null(tmp)) |
( (!is.character(tmp$modelselection))
& !((length(indices_Xc) == length(indices_previous))
& sum(!(indices_Xc %in% indices_previous))==0))) ){
# stop criterion:
# num of ite larger than 10
# screening does not select any SNP
# SNPs selected in this ite are the same as those in the last ite.
indices_previous <- indices_Xc
n = length(Y)
PQL_est <- PQL(Y=Y, kinship=kinship, X=NULL, Xc=Xc, Xs=Xs, indices_X=NULL, indices_Xc=indices_Xc, family=family, postprob=postprob, offset=NULL)
y_star <- PQL_est$y_star
Kappa <- PQL_est$kappa
Beta <- PQL_est$beta
inv_V_vector <- PQL_est$inv_v
H <- PQL_est$H
P <- PQL_est$P
D_inv <- PQL_est$D_inv
if(is.null(Xc) & is.null(Xs)){
A <- H-sum(P%*%(D_inv*t(P)))
eign <- eigen(A, symmetric = TRUE)
P <- eign$vectors
y.tilde = t(P) %*% (y_star-Beta)
D <- eign$values
D_inv <- D^(-1)
#D_inv[!is.finite(D_inv)] <- 0
D_inv[n] <- 0
}else{
X_1 <-  PQL_est$X_sig1
A <- H-X_1%*%solve(t(X_1)%*%P%*%(D_inv*t(P))%*%X_1)%*%t(X_1)
eign <- eigen(A, symmetric = TRUE)
P <- eign$vectors
y.tilde = t(P) %*% (y_star-X_1%*%Beta)
D <- eign$values
D_inv <- D^(-1)
D_inv[(n-ncol(X_1)+1):n] <- 0
}
X.tilde = t(P) %*% SNPs
# Estimate beta with beta.hat and compute var(beta.hat)
xj.t.xj = apply(X.tilde*(D_inv*X.tilde),2,sum)
xj.t.y = t(X.tilde) %*% (D_inv*y.tilde)
beta.hat = xj.t.y / xj.t.xj
var.beta.hat = 1 / xj.t.xj
t.statistic <- beta.hat / sqrt(var.beta.hat)
pvalues <- 2*pnorm(abs(t.statistic), mean=0, sd=1, lower.tail=FALSE)
P3D_return_dat <- cbind(beta.hat,var.beta.hat,pvalues)
P3D_return_dat <- as.data.frame(P3D_return_dat)
colnames(P3D_return_dat) <- c("Beta_Hat","Var_Beta_Hat","P_Values")
#indices_Xc=indices_previous
n= length(Y)
#estimate pi0
log.marginal.likelihood_par = function(param)
{
pi0 = exp(param[1]) / (1+exp(param[1]))
g = exp(param[2])
return(sum(log(pi0*dnorm(beta.hat,mean= 0,sd=sqrt(var.beta.hat)) +
(1-pi0)*dnorm(beta.hat,mean= 0,sd=sqrt(var.beta.hat*(g+1)))
)))
}
result <- optim(c(2,-2), fn=log.marginal.likelihood_par, lower = c(1,-20), method = "L-BFGS-B", hessian=TRUE, control = list(fnscale=-1))
pi0.hat = exp(result$par[1]) / (1+exp(result$par[1]))
g.hat = exp(result$par[2])
# Compute posterior probability of beta_j different than 0:
numerator <- (1-pi0.hat)*dnorm(beta.hat,mean= 0,sd=sqrt(var.beta.hat*(g.hat+1)))
denominator <- pi0.hat*dnorm(beta.hat,mean= 0,sd=sqrt(var.beta.hat)) +
(1-pi0.hat)*dnorm(beta.hat,mean= 0,sd=sqrt(var.beta.hat*(g.hat+1)))
postprob <- numerator / denominator
if(!is.null(indices_previous)){
postprob[indices_previous] = 0
}
order.postprob <- order(postprob, decreasing=TRUE)
postprob.ordered <- postprob[order.postprob]
FDR.Bayes <- cumsum(postprob.ordered) / 1:ncol(SNPs)
if(sum(FDR.Bayes > FDR.threshold) == 0){
P3D_return_dat <- cbind(P3D_return_dat,postprob,FALSE)
P3D_return_dat <- as.data.frame(P3D_return_dat)
colnames(P3D_return_dat) <- c("Beta_Hat","Var_Beta_Hat","P_Values","PostProb","Significant")
}else{
P3D_return_dat <- cbind(P3D_return_dat,postprob,postprob >= postprob.ordered[max(which(FDR.Bayes > FDR.threshold))])
P3D_return_dat <- as.data.frame(P3D_return_dat)
colnames(P3D_return_dat) <- c("Beta_Hat","Var_Beta_Hat","P_Values","PostProb","Significant")
}
# screen_list[[ite]] <- P3D_return_dat
if(sum(P3D_return_dat$Significant) > 0){
indices_X <- which(P3D_return_dat$Significant)
X <- SNPs[, indices_X,drop = FALSE]
if(ite != 1){
pi0=pi0_1
g=g_1
}else{
pi0 = pi0.hat
g = g.hat
}
PQL_est <- PQL(Y=Y, kinship=kinship, X=X, Xc=Xc, Xs=Xs, indices_X=indices_X, indices_Xc=indices_previous, family=family, postprob = postprob, offset =offset)
y_star <- PQL_est$y_star
Kappa <- PQL_est$kappa
Beta <- PQL_est$beta
inv_V_vector <- PQL_est$inv_v
H <- PQL_est$H
P <- PQL_est$P
D_inv <- PQL_est$D_inv
if(is.null(Xs)){
y.tilde = t(P) %*% (y_star-Beta[1])
}else{
y.tilde = t(P) %*% (y_star-cbind(1,Xs)%*%Beta[1:(ncol(Xs)+1)])
}
X.tilde = t(P) %*% cbind(X, Xc)
#y.tilda~N(X.tilde*Beta,D)  # full model, no intercept in X.tilde
# elements with all k regressors
dinvy <- D_inv*y.tilde
ydinvy <- sum(D_inv*y.tilde^2)
xdinvx <- t(X.tilde)%*%(D_inv*X.tilde)
total.p <- ncol(X.tilde)
if(total.p < 16){
# Do full model search
total.models <- 2^total.p
log.unnormalized.posterior.probability <- rep(NA, total.models)
log.unnormalized.posterior.probability[1] <- total.p * log(pi0) + log_marginal_likelihood_null(y.tilde=y.tilde,D_inv=D_inv)
dat <- rep(list(0:1), total.p)
dat <- as.matrix(expand.grid(dat))
for (i in 1:(total.models-1)){
model <- unname(which(dat[i + 1,] == 1))
k <- length(model)
Xsub <- X.tilde[,model,drop = FALSE]
if(Matrix::rankMatrix(Xsub)[1] < ncol(Xsub)){
dropped_cols <- caret::findLinearCombos(Xsub)$remove
model <- model[-dropped_cols]
}
x.tilde_m <- matrix(X.tilde[,model], ncol = length(model))
log.unnormalized.posterior.probability[i+1] <-
k*log(1-pi0) + (total.p-k)*log(pi0) +
log.marginal.likelihood(k=k, x.tilde_m=x.tilde_m, y.tilde=y.tilde, D_inv=D_inv, ydinvy=ydinvy, dinvy=dinvy, g=g)
}
log.unnormalized.posterior.probability <- log.unnormalized.posterior.probability - max(log.unnormalized.posterior.probability)
unnormalized.posterior.probability <- exp(log.unnormalized.posterior.probability)
posterior.probability <- unnormalized.posterior.probability/sum(unnormalized.posterior.probability)
}else {
# Do model search with genetic algorithm
fitness_ftn <- function(string){
if(sum(string) == 0){
return(total.p * log(pi0) + log_marginal_likelihood_null(y.tilde=y.tilde,D_inv=D_inv))
}else{
model <- which(string==1)
k <- length(model)
Xsub <- X.tilde[,model,drop = FALSE]
if(Matrix::rankMatrix(Xsub)[1] < ncol(Xsub)){
dropped_cols <- caret::findLinearCombos(Xsub)$remove
model <- model[-dropped_cols]
}
x.tilde_m <- matrix(X.tilde[,model], ncol = length(model))
return(k*log(1-pi0) + (total.p-k)*log(pi0) +
log.marginal.likelihood(k=k, x.tilde_m=x.tilde_m, y.tilde=y.tilde, D_inv=D_inv, ydinvy=ydinvy, dinvy=dinvy, g=g)
)
}
}
if(total.p > 99){
suggestedsol <- diag(total.p)
tmp_log.unnormalized.posterior.probability <- vector()
for(i in 1:total.p){
model <- which(suggestedsol[i,]==1)
k <- length(model)
Xsub <- X.tilde[,model,drop = FALSE]
if(Matrix::rankMatrix(Xsub)[1] < ncol(Xsub)){
dropped_cols <- caret::findLinearCombos(Xsub)$remove
model <- model[-dropped_cols]
}
x.tilde_m <- matrix(X.tilde[,model], ncol = length(model))
tmp_log.unnormalized.posterior.probability[i] <- (k*log(1-pi0) + (total.p-k)*log(pi0) +
log.marginal.likelihood(k=k, x.tilde_m=x.tilde_m, y.tilde=y.tilde, D_inv=D_inv, ydinvy=ydinvy, dinvy=dinvy, g=g) )
}
suggestedsol <- rbind(0,suggestedsol[order(tmp_log.unnormalized.posterior.probability,decreasing = TRUE)[1:99],])
}else{
suggestedsol <- rbind(0,diag(total.p))
}
# maxiterations = 4000
# runs_til_stop = 1000
fitness_ftn <- memoise::memoise(fitness_ftn)
ans <- GA::ga("binary", fitness = fitness_ftn, nBits = total.p,maxiter = maxiterations,popSize = 100,
elitism = min(c(10,2^total.p)),run = runs_til_stop,suggestions = suggestedsol,monitor = FALSE)
memoise::forget(fitness_ftn)
dat <- ans@population
dupes <- duplicated(dat)
dat <- dat[!dupes,]
ans@fitness <- ans@fitness[!dupes]
log.unnormalized.posterior.probability <- ans@fitness - max(ans@fitness)
unnormalized.posterior.probability <- exp(log.unnormalized.posterior.probability)
posterior.probability <- unnormalized.posterior.probability/sum(unnormalized.posterior.probability)
}
inclusion_prb <- unname((t(dat)%*%posterior.probability)/sum(posterior.probability))
model <- dat[which.max(posterior.probability),]
model_dat <- cbind(c(indices_X, indices_previous),model,inclusion_prb)
model_dat <- as.data.frame(model_dat)
colnames(model_dat) <- c("SNPs","BestModel","Inclusion_Prob")
# select_list[[ite]] <- model_dat
tmp=list(prescreen = P3D_return_dat,postprob=postprob,modelselection = model_dat,pi_0_hat = pi0.hat, g_hat = g.hat)
}else{
tmp=list(prescreen = P3D_return_dat,postprob=postprob,modelselection = "No significant in prescreen1",pi_0_hat = pi0.hat, g_hat = g.hat)
}
if(!is.character(tmp$modelselection)){
indices_Xc <- tmp$modelselection$SNPs[tmp$modelselection$BestModel == 1]
postprob <- tmp$postprob
indices_sig_list[[ite]] <- indices_Xc
if(ite == 1){
pi0_1 <- tmp$pi_0_hat
g_1 <- tmp$g_hat
}
Xc <- SNPs[,indices_Xc]
ite <- ite + 1
}
}
return(tmp)
}
family = "poisson"
if(sum(family %in% c("poisson","bernoulli")) == 0){
stop("family must be either poisson or bernoulli")
}
if(family == "bernoulli"){
family <- "binomial"
}
if(!is.numeric(Y)){
stop("Y has to be numeric")
}
if(!is.matrix(SNPs)){
stop("SNPs has to be a matrix object")
}
if(!is.numeric(SNPs)){
stop("SNPs has to contain numeric values")
}
if(maxiterations-floor(maxiterations)!=0){
stop("maxiterations has to be a integer")
}
if(runs_til_stop-floor(runs_til_stop)!=0){
stop("runs_til_stop has to be a integer")
}
if(maxiterations < runs_til_stop){
stop("maxiterations has to be larger than runs_til_stop")
}
if(FDR_Nominal > 1 | FDR_Nominal < 0){
stop("FDR_Nominal has to be between 0 and 1")
}
covariance <- list()
covariance[[1]] <- kinship
covariance[[2]] <- diag(1, nrow = n, ncol = n)
Covariance=covariance
GINAX <- GINAX_terminal(Y = Y, kinship = Covariance, Z=Z, SNPs=SNPs, family=family, offset=offset,
FDR.threshold = 1-FDR_Nominal, maxiterations = maxiterations, runs_til_stop = runs_til_stop)
n_rf
kinship = Covariance
GINAX <- GINAX_terminal(Y = Y, kinship = Covariance, Z=Z, SNPs=SNPs, family=family, offset=offset,
FDR.threshold = 1-FDR_Nominal, maxiterations = maxiterations, runs_til_stop = runs_til_stop)
length(X)
length(z)
length(Z)
length(Covariance)
n <- length(Y)
if(is.null(Z)){
n_rf <- length(Covariance)
Z <- list()
for(rf in 1:n_rf){
Z[[rf]] <- diag(1, ncol = n, nrow = n)
}
}
GINAX <- GINAX_terminal(Y = Y, kinship = Covariance, Z=Z, SNPs=SNPs, family=family, offset=offset,
FDR.threshold = 1-FDR_Nominal, maxiterations = maxiterations, runs_til_stop = runs_til_stop)
ite <- 1
indices_sig_list <- list()
Xc <- NULL
X = NULL
Xs=NULL
pi0_1 <- NULL
indices_Xc <- NULL
tmp = NULL
indices_previous = NULL
postprob = NULL
indices_previous <- indices_Xc
n = length(Y)
PQL_est <- PQL(Y=Y, kinship=kinship, X=NULL, Xc=Xc, Xs=Xs, indices_X=NULL, indices_Xc=indices_Xc, family=family, postprob=postprob, offset=NULL)
length(kinship)
glmfit <- glm(Y~1, family = family)
Beta <- glmfit$coefficients
n <- length(Y)
n_rf <- length(kinship)
Alpha <- list()
Kappa <- list()
Kappa_temp <- list()
n_rf
for(i_rf in 1:n_rf){
Alpha[[i_rf]] <- matrix(rep(0, nrow(kinship[[i_rf]])), ncol = 1)
Kappa[[i_rf]] <- 0
Kappa_temp[[i_rf]] <- 0
}
i_rf
Alpha[[i_rf]] <- matrix(rep(0, nrow(kinship[[i_rf]])), ncol = 1)
nrow(kinship[[i_rf]]
)
kinship[[i_rf]]
nrow(kinship[[i_rf]])
test=kinship[[i_rf]]
covariance <- list()
data("kinship")
load("C:/Users/xshuangshuang/OneDrive - Virginia Tech/GINAX/data/data_kinship.rda")
covariance[[1]] <- kinship
covariance[[2]] <- diag(1, nrow = n, ncol = n)
kinship = covariance
for(i_rf in 1:n_rf){
Alpha[[i_rf]] <- matrix(rep(0, nrow(kinship[[i_rf]])), ncol = 1)
Kappa[[i_rf]] <- 0
Kappa_temp[[i_rf]] <- 0
}
GINAX <- GINAX_terminal(Y = Y, kinship = Covariance, Z=Z, SNPs=SNPs, family=family, offset=offset,
FDR.threshold = 1-FDR_Nominal, maxiterations = maxiterations, runs_til_stop = runs_til_stop)
Covariance = covariance
View(Covariance)
GINAX <- GINAX_terminal(Y = Y, kinship = Covariance, Z=Z, SNPs=SNPs, family=family, offset=offset,
FDR.threshold = 1-FDR_Nominal, maxiterations = maxiterations, runs_til_stop = runs_til_stop)
devtools::document()
devtools::document()
devtools::build_rmd("vignettes/GINAX.Rmd")
roxygen2::roxygenise()
